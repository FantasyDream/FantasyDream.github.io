<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Nier&#39;s Note</title>
  
  <subtitle>For the Glory of Mankind</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://fantasydream.github.io/"/>
  <updated>2019-03-06T06:46:32.186Z</updated>
  <id>http://fantasydream.github.io/</id>
  
  <author>
    <name>FantasyDream</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>CentOS7安装RabbitMQ</title>
    <link href="http://fantasydream.github.io/2019/03/06/CentOS7%E5%AE%89%E8%A3%85RabbitMQ/"/>
    <id>http://fantasydream.github.io/2019/03/06/CentOS7安装RabbitMQ/</id>
    <published>2019-03-06T06:37:00.000Z</published>
    <updated>2019-03-06T06:46:32.186Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p><a href="https://www.lanzous.com/i2ym3xe" target="_blank" rel="noopener">https://www.lanzous.com/i2ym3xe</a></p><p>下载后解压出两个文件，传到服务器上</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install erlang-20.3.8.17-1.el6.x86_64.rpm</span><br><span class="line">yum installrabbitmq-server-3.7.10-1.el6.noarch.rpm</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">开启web管理插件</span></span><br><span class="line">rabbitmq-plugins enable rabbitmq_management</span><br><span class="line"><span class="meta">#</span><span class="bash">启动服务</span></span><br><span class="line">service rabbitmq-server start</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">添加用户和删除guest</span></span><br><span class="line">rabbitmqctl add_user admin 123456abc</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br><span class="line">rabbitmqctl delete_user guest</span><br><span class="line">rabbitmqctl set_permissions -p "/" admin ".*" ".*" ".*"</span><br></pre></td></tr></table></figure><h2 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h2><p>浏览器访问 http://你的ip:15672</p><p>输入admin 123456abc 即可访问</p>]]></content>
    
    <summary type="html">
    
      RabbitMQ是由spring的开发团队Pivotal用erlang语言编写的一款消息队列。其功能丰富，支持很多插件，spring也对其无缝支持，可以很方便的在spring项目中使用该队列，所以很受市场欢迎。但其在centos上的安装还是有些复杂的，网上的教程也都不一样，我找到了一边相对简单的安装流程，分享出来
    
    </summary>
    
      <category term="Linux" scheme="http://fantasydream.github.io/categories/Linux/"/>
    
    
      <category term="rabbitmq" scheme="http://fantasydream.github.io/tags/rabbitmq/"/>
    
  </entry>
  
  <entry>
    <title>Docker配置mysql主从复制</title>
    <link href="http://fantasydream.github.io/2019/03/05/Docker%E9%85%8D%E7%BD%AEmysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6/"/>
    <id>http://fantasydream.github.io/2019/03/05/Docker配置mysql主从复制/</id>
    <published>2019-03-05T06:46:22.000Z</published>
    <updated>2019-03-06T05:57:32.217Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-创建文件夹和配置文件"><a href="#1-创建文件夹和配置文件" class="headerlink" title="1.创建文件夹和配置文件"></a>1.创建文件夹和配置文件</h2><p>(1)创建主数据库文件夹及配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mkdir /docker</span><br><span class="line">mkdir /docker/mysql</span><br><span class="line">mkdir /docker/mysql/&#123;master,slave&#125;</span><br><span class="line">// 主库配置</span><br><span class="line">mkdir /docker/mysql/master/data</span><br><span class="line">mkdir /docker/mysql/master/mysql-files</span><br><span class="line">vim /docker/mysql/master/my.cnf</span><br><span class="line">// 下面的内容填入my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=11</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">table_definition_cache=400</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>(2)创建从数据库文件夹及配置文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 从库配置</span><br><span class="line">mkdir /docker/mysql/slave/data</span><br><span class="line">mkdir /docker/mysql/slave/mysql-files</span><br><span class="line">vim /docker/mysql/slave/my.cnf</span><br><span class="line">// 下面的内容填入my.cnf</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line"><span class="built_in">log</span>-bin=mysql-bin</span><br><span class="line">server-id=22</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">table_definition_cache=400</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><h2 id="2-创建docker-桥接网络，用于MySQL主从容器之间互联"><a href="#2-创建docker-桥接网络，用于MySQL主从容器之间互联" class="headerlink" title="2.创建docker 桥接网络，用于MySQL主从容器之间互联"></a>2.创建docker 桥接网络，用于MySQL主从容器之间互联</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create mysql</span><br></pre></td></tr></table></figure><h2 id="3-创建mysql容器"><a href="#3-创建mysql容器" class="headerlink" title="3.创建mysql容器"></a>3.创建mysql容器</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//创建mysql主数据库容器</span><br><span class="line">docker run -d --privileged=<span class="literal">true</span> -p 3306:3306 -v /docker/mysql/master/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/master/data:/var/lib/mysql -v /docker/mysql/master/mysql-files:/var/lib/mysql-files -e MYSQL_ROOT_PASSWORD=123456 --name mysql-master --network mysql --network-alias mysql-master mysql:latest</span><br><span class="line"></span><br><span class="line">// 创建mysql从数据库容器</span><br><span class="line">docker run -d --privileged=<span class="literal">true</span> -p 3307:3306 -v /docker/mysql/slave/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/slave/data:/var/lib/mysql -v /docker/mysql/slave/mysql-files:/var/lib/mysql-files -e MYSQL_ROOT_PASSWORD=123456 --name mysql-slave --network mysql --network-alias mysql-slave mysql:latest</span><br></pre></td></tr></table></figure><h2 id="4-配置mysql主从复制"><a href="#4-配置mysql主从复制" class="headerlink" title="4.配置mysql主从复制"></a>4.配置mysql主从复制</h2><p>(1)配置主服务器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-master bash</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line">// 输入密码</span><br><span class="line"></span><br><span class="line">// 我这里用root用户来进行主从复制,也可以自己创建新用户来替换掉</span><br><span class="line">// '%' 代表所有ip都能来复制,可以改成从自己的ip来提高安全性</span><br><span class="line">GRANT REPLICATION SLAVE ON *.* TO 'root'@'%';</span><br><span class="line"></span><br><span class="line">// 刷新权限</span><br><span class="line">flush privileges;</span><br><span class="line"></span><br><span class="line">// 查看主服务器状态</span><br><span class="line">show master status;</span><br><span class="line">// 记住其中的File Position 列的内容</span><br><span class="line"></span><br><span class="line">// 退出mysql</span><br><span class="line">exit;</span><br><span class="line"></span><br><span class="line">// 退出mysql容器</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><p>(2)配置从服务器:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">// 进入MySQL从数据库容器</span><br><span class="line">docker exec -it mysql-slave bash</span><br><span class="line"></span><br><span class="line">mysql -uroot -p</span><br><span class="line">// 输入密码</span><br><span class="line"></span><br><span class="line">change master to master_host='mysql-master',master_user='root',master_password='123456',master_log_file='刚才记住的File列的内容',master_log_pos=position的内容(不用加引号),master_port=3306;</span><br><span class="line"></span><br><span class="line">// 启动slave</span><br><span class="line">start slave;</span><br><span class="line"></span><br><span class="line">// 查看slave状态</span><br><span class="line">show slave status\G;</span><br></pre></td></tr></table></figure><p>当 Slave_IO_Running , Slave_SQL_Running 都为yes时代表配置成功</p><h2 id="5-验证"><a href="#5-验证" class="headerlink" title="5.验证"></a>5.验证</h2><p>去主库做一些操作,看看从库是否会同步更新,如果用的是一些图形化管理工具,记得点一下刷新</p><h2 id="6-关于非docker环境下的主从复制配置"><a href="#6-关于非docker环境下的主从复制配置" class="headerlink" title="6.关于非docker环境下的主从复制配置"></a>6.关于非docker环境下的主从复制配置</h2><p>只需不执行关于docker的命令就可</p>]]></content>
    
    <summary type="html">
    
      随着docker在微服务中的流行，现在的大部分中间件也开始部署在docker中。docker部署这些中间件时是不需要考虑系统环境因素的，只需几行简单的命令，就能部署完成一个软件。但同时也会带来一些其他的麻烦，比如中间件的数据会存储在容器中，这样容器一销毁就会导致数据丢失，还有就是容器间的通讯也是问题。好在docker都有给出很方便的解决方案，是我们更好的享受便利。本文就会借着mysql在docker中的主从配置来讲解如何将数据存储在容器外和容器之间的通讯
    
    </summary>
    
      <category term="Linux" scheme="http://fantasydream.github.io/categories/Linux/"/>
    
    
      <category term="docker" scheme="http://fantasydream.github.io/tags/docker/"/>
    
      <category term="mysql" scheme="http://fantasydream.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Redis主从搭建及配置</title>
    <link href="http://fantasydream.github.io/2019/03/04/Redis%E4%B8%BB%E4%BB%8E%E6%90%AD%E5%BB%BA%E5%8F%8A%E9%85%8D%E7%BD%AE/"/>
    <id>http://fantasydream.github.io/2019/03/04/Redis主从搭建及配置/</id>
    <published>2019-03-04T09:10:01.000Z</published>
    <updated>2019-03-05T09:22:32.846Z</updated>
    
    <content type="html"><![CDATA[<h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>自己寻找要用的redis版本进行下载，我这边使用的是3.2.9版本</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf redis-3.2.9.tar.gz</span><br><span class="line">mkdir redis</span><br><span class="line">mv redis-3.2.9 /usr/<span class="built_in">local</span>/redis</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/redis</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/redis/redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改如下配置</span></span><br><span class="line">daemonize yes</span><br><span class="line">protectmode no</span><br></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行redis-server</span></span><br><span class="line">bash /usr/local/redis/bin/redis-server ../redis.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 连接server，之后就能对redis进行存取</span></span><br><span class="line">bash /usr/local/redis/bin/redis-cli</span><br></pre></td></tr></table></figure><h2 id="主从"><a href="#主从" class="headerlink" title="主从"></a>主从</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 编辑 从redis 的服务器上的redis.conf</span></span><br><span class="line">slaveof 主服务器ip 6379</span><br></pre></td></tr></table></figure><p>在主服务器上插入一条数据，检查从服务器上有没有该数据几个检验是否配置成功</p><h2 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/redis/sentinel.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 配置如下信息</span></span><br><span class="line">sentinel monitor mymaster 主redis的ip 6379 2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 每个Sentinel节点都要定期PING命令来判断Redis数据节点和其余Sentinel节点是否可达，如果超过30000毫秒且没有回复，则判定不可达</span></span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 当Sentinel节点集合对主节点故障判定达成一致时，Sentinel领导者节点会做故障转移操作，选出新的主节点，原来的从节点会向新的主节点发起复制操作，限制每次向新的主节点发起复制操作的从节点个数为1</span></span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 故障转移超时时间为180000毫秒</span></span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动</span></span><br><span class="line">/usr/local/redis/bin/redis-sentinel ../sentinel.conf</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看哨兵信息</span></span><br><span class="line">redis-cli -h 127.0.0.1 -p 26379 INFO Sentinel</span><br></pre></td></tr></table></figure><p>在两台redis服务器上都配置一下哨兵，其中配置信息中的 mymaster可以当成集群名来使用，用于tomcat session共享</p>]]></content>
    
    <summary type="html">
    
      redis是一个基于内存的nosql数据库，其超快的读写速度和支持多种数据结构的特性使其很快就在web后端流行起来，一般是用于缓存不频繁更改的数据和存储经常变动的数据，但因为其基于内存，其实还是有抽风的时候，所以一般会组成主从或者集群来使用，这篇文章讲的就是redis主从配置和哨兵配置，哨兵可以在主redis挂了时自动推选出新的主redis来使用。
    
    </summary>
    
      <category term="Linux" scheme="http://fantasydream.github.io/categories/Linux/"/>
    
    
      <category term="redis" scheme="http://fantasydream.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>CentOS7安装Docker</title>
    <link href="http://fantasydream.github.io/2019/03/04/CentOS7%E5%AE%89%E8%A3%85Docker/"/>
    <id>http://fantasydream.github.io/2019/03/04/CentOS7安装Docker/</id>
    <published>2019-03-04T02:37:00.000Z</published>
    <updated>2019-03-05T09:31:06.462Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/006WmYZrgy1g0s0ipooj5j30l10eyq6i.jpg" alt></p><h2 id="一、安装docker"><a href="#一、安装docker" class="headerlink" title="一、安装docker"></a>一、安装docker</h2><h3 id="1-检查内核版本"><a href="#1-检查内核版本" class="headerlink" title="1.检查内核版本"></a>1.检查内核版本</h3><p>​    Docker要求Linux系统的内核版本高与3.10，所以安装前通过命令检查内核版本, 命令如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">uname -r</span><br></pre></td></tr></table></figure><h3 id="2-更新系统软件"><a href="#2-更新系统软件" class="headerlink" title="2.更新系统软件"></a>2.更新系统软件</h3><p>​    更新系统依赖包，以便于Docker的安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><h3 id="3-卸载旧版本docker"><a href="#3-卸载旧版本docker" class="headerlink" title="3.卸载旧版本docker"></a>3.卸载旧版本docker</h3><p>​    卸载掉旧版本，以免与新版本冲突</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum remove docker  docker-common docker-selinux docker-engine</span><br></pre></td></tr></table></figure><h3 id="4-安装需要的软件包"><a href="#4-安装需要的软件包" class="headerlink" title="4.安装需要的软件包"></a>4.安装需要的软件包</h3><p>​    yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="5-设置docker的yum源"><a href="#5-设置docker的yum源" class="headerlink" title="5.设置docker的yum源"></a>5.设置docker的yum源</h3><p>​    用于安装最新版docker</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure><h3 id="6-安装docker"><a href="#6-安装docker" class="headerlink" title="6.安装docker"></a>6.安装docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce</span><br></pre></td></tr></table></figure><h3 id="7-启动并加入开机启动"><a href="#7-启动并加入开机启动" class="headerlink" title="7.启动并加入开机启动"></a>7.启动并加入开机启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line">sudo systemctl enable docker</span><br></pre></td></tr></table></figure><h3 id="8-检查是否安装成功"><a href="#8-检查是否安装成功" class="headerlink" title="8.检查是否安装成功"></a>8.检查是否安装成功</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker version</span><br></pre></td></tr></table></figure><h2 id="二、Docker常用的一些命令"><a href="#二、Docker常用的一些命令" class="headerlink" title="二、Docker常用的一些命令"></a>二、Docker常用的一些命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 查看本地所有的镜像</span><br><span class="line">docker images</span><br><span class="line">// 搜索软件镜像</span><br><span class="line">docker search 你要搜索的软件镜像名</span><br><span class="line">// 下载软件镜像,不加版本号则默认为最新版</span><br><span class="line">docker pull 镜像名:版本号 </span><br><span class="line">// 将镜像启动为容器，部分参数在安装mysql时会解释</span><br><span class="line">docker run 镜像名或者镜像id</span><br><span class="line">// 容器的启动，停止，重启</span><br><span class="line">docker start/stop/restart 容器名或者容器id</span><br><span class="line">// 查看运行中的容器</span><br><span class="line">docker ps</span><br><span class="line">// 查看所有容器</span><br><span class="line">docker ps -a</span><br><span class="line">// 删除容器</span><br><span class="line">docker rm 容器名或者容器id</span><br><span class="line">// 删除镜像</span><br><span class="line">docker rmi 镜像id</span><br></pre></td></tr></table></figure><p>容器与镜像的关系：</p><p>镜像类似与oop中的类，而容器的类似与对象，一个镜像可以启动多个容器，只要容器名和映射端口号不同</p><h2 id="三、Docker安装常用的开发软件"><a href="#三、Docker安装常用的开发软件" class="headerlink" title="三、Docker安装常用的开发软件"></a>三、Docker安装常用的开发软件</h2><p>下面的安装基本都将软件的数据和配置放到主机上，便于修改配置和备份</p><h3 id="1-安装mysql"><a href="#1-安装mysql" class="headerlink" title="1.安装mysql"></a>1.安装mysql</h3><p>（1）创建目录用于存储mysql的文件和配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mkdir /docker</span><br><span class="line">mkdir /docker/mysql</span><br><span class="line">mkdir /docker/mysql/data</span><br><span class="line">mkdir /docker/mysql/mysql-files //安装mysql8.0才需要这个文件夹，5.7不需要</span><br><span class="line">vim /docker/mysql/my.cnf</span><br><span class="line">//下面的内容输入到my.cnf中</span><br><span class="line">[mysqld]</span><br><span class="line">user=mysql</span><br><span class="line">character-set-server=utf8</span><br><span class="line">default_authentication_plugin=mysql_native_password</span><br><span class="line">table_definition_cache=400</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure><p>（2） 安装最新版MySQL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true -p 3306:3306 -v /docker/mysql/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/data:/var/lib/mysql -v /docker/mysql/mysql-files:/var/lib/mysql-files -e MYSQL_ROOT_PASSWORD=yourpassword --name mysql mysql:latest</span><br></pre></td></tr></table></figure><p>这样mysql最新版的docker容器就安装成功了。</p><p>（3）若想要自定义安装版本，可以这样</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.7 //5.7可替换为自己想要的版本</span><br><span class="line">docker run -d --privileged=true -p 3306:3306 -v /docker/mysql/my.cnf:/etc/mysql/my.cnf -v /docker/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=yourpassword --name mysql mysql:5.7</span><br></pre></td></tr></table></figure><p>（4）run部分命令参数解释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-d // 以守护进程方式运行</span><br><span class="line">-privileged=true // 让docker容器的内部root用户拥有真正的root权限</span><br><span class="line">-p // 映射端口号</span><br><span class="line">-v // 映射容器内的文件夹到宿主机的文件夹</span><br><span class="line">--name //给容器取名</span><br></pre></td></tr></table></figure><p>（5）进入容器内部操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql bash // mysql为镜像名，bash为进去要操作的见面</span><br><span class="line">mysql -u root -p </span><br><span class="line">// 输入你设置的密码</span><br><span class="line">// 即可进入数据库</span><br><span class="line">// 也可以直接使用navicat等工具进行连接，记得ip填写你的服务器公网ip</span><br></pre></td></tr></table></figure><h3 id="2-安装redis"><a href="#2-安装redis" class="headerlink" title="2.安装redis"></a>2.安装redis</h3><p>（1）创建文件夹存储redis 的配置文件和持久化数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mkdir /docker/redis</span><br><span class="line">mkdir /docker/redis/data</span><br><span class="line">wget https://raw.githubusercontent.com/antirez/redis/4.0/redis.conf -O /docker/redis/redis.conf</span><br><span class="line">vim /docker/redis/redis.conf</span><br><span class="line">// 将"logfile "" " 改为 "logfile "access.log" "</span><br><span class="line">// 将"bind 127.0.0.1" 改为 "# bind 127.0.0.1"</span><br><span class="line">// 将"appendonly no" 改为 "appendonly yes" </span><br><span class="line">// 将"# requirepass foobared" 改为 "requirepass 你的密码"</span><br><span class="line">// 修改后即可开启远程连接和密码验证</span><br></pre></td></tr></table></figure><p>（2）安装最新版redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true -p 6379:6379 -v /docker/redis/redis.conf:/etc/redis/redis.conf -v /docker/redis/data:/data --name redis redis:latest redis-server /etc/redis/redis.conf</span><br></pre></td></tr></table></figure><p>（3） 进入容器内部操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">//进入容器内部</span><br><span class="line">docker exec -it redis bash</span><br><span class="line">// 连接redis</span><br><span class="line">redis-cli -h 127.0.0.1 -p 6379 -a 你的密码 </span><br><span class="line">// 测试</span><br><span class="line">ping</span><br><span class="line">// 返回 pong 就成功了</span><br></pre></td></tr></table></figure><h3 id="3-安装rabbitmq"><a href="#3-安装rabbitmq" class="headerlink" title="3.安装rabbitmq"></a>3.安装rabbitmq</h3><p>（1）同样，先创建文件夹用于将rabbitmq的数据放到主机上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir /docker/rabbitmq</span><br><span class="line">mkdir /docker/rabbitmq/data</span><br><span class="line">wget https://raw.githubusercontent.com/rabbitmq/rabbitmq-server/master/docs/rabbitmq.conf.example -O /docker/rabbitmq/rabbitmq.conf</span><br></pre></td></tr></table></figure><p>（2）安装rabbitmq，安装的是3.7.8的rabbitmq的带web管理界面的版本，是目前为止的最新版</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true -p 15672:15672 -p 5672:5672 -v /docker/rabbitmq/data:/var/rabbitmq/lib -v /docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf --name rabbitmq rabbitmq:3.7.8-management</span><br></pre></td></tr></table></figure><p>（3）进入rabbitmq容器中增加一个管理员用户，因为guest用户在默认配置下不能用外部ip登陆</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it rabbitmq bash</span><br><span class="line"><span class="meta">#</span> 这里的admin可以替换成你的用户名和密码</span><br><span class="line">rabbitmqctl add_user admin admin</span><br><span class="line">rabbitmqctl set_user_tags admin administrator</span><br></pre></td></tr></table></figure><p>（4）用web界面配置</p><p>打开浏览器， 输入http://你的ip:15672，输入用户名和密码，进去后可以添加用户和设置权限</p><h3 id="4-安装mongo"><a href="#4-安装mongo" class="headerlink" title="4.安装mongo"></a>4.安装mongo</h3><p>（1）还是创建文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /docker/mongo</span><br><span class="line">mkdir /docker/mongo/data</span><br></pre></td></tr></table></figure><p>（2）安装最新版mongodb</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true -p 27017:27017 -v /docker/mongo/data:/data/db --name mongo mongo:latest</span><br></pre></td></tr></table></figure><p>（3）进入mongo容器，进行简单设置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mongo bash</span><br><span class="line">mongo</span><br><span class="line">use admin</span><br><span class="line">db.createUser(&#123; user: 'root', pwd: '你的密码', roles: [ &#123; role: "userAdminAnyDatabase", db: "admin" &#125; ] &#125;)</span><br><span class="line">//之后即可在连接工具输入相应参数连接</span><br></pre></td></tr></table></figure><h3 id="5-安装zookeeper"><a href="#5-安装zookeeper" class="headerlink" title="5.安装zookeeper"></a>5.安装zookeeper</h3><p>（1）创建文件夹和配置文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mkdir /docker/zookeeper</span><br><span class="line">mkdir /docker/zookeeper/data</span><br><span class="line">vim /docker/zookeeper/zoo.cfg</span><br><span class="line">//将下面的内容输入到文件中</span><br><span class="line">clientPort=2181</span><br><span class="line">dataDir=/data</span><br><span class="line">dataLogDir=/datalog</span><br><span class="line">tickTime=2000</span><br><span class="line">initLimit=5</span><br><span class="line">syncLimit=2</span><br><span class="line">autopurge.snapRetainCount=3</span><br><span class="line">autopurge.purgeInterval=0</span><br><span class="line">maxClientCnxns=60</span><br></pre></td></tr></table></figure><p>（2）安装zookeeper</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --privileged=true -p 2181:2181 -v /docker/zookeeper/zoo.cfg:/conf/zoo.cfg -v /docker/zookeeper/data:/data --name zookeeper zookeeper:latest</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      docker与微服务的相性让他们两个都发展迅速，现在大部分公司都会用docker来部署他们的微服务。而在服务器端，通常公司都会用centos而不是ubuntu，docker在centos上安装是没有Ubuntu便捷的，所以本文就记录一下docker在centos上的安装，以及一些常用软件在docker上的安装，其中在部署软件时，会将数据及配置文件移动到容器外，以方便修改和保存数据。
    
    </summary>
    
      <category term="Linux" scheme="http://fantasydream.github.io/categories/Linux/"/>
    
    
      <category term="docker" scheme="http://fantasydream.github.io/tags/docker/"/>
    
      <category term="mysql" scheme="http://fantasydream.github.io/tags/mysql/"/>
    
      <category term="rabbitmq" scheme="http://fantasydream.github.io/tags/rabbitmq/"/>
    
      <category term="redis" scheme="http://fantasydream.github.io/tags/redis/"/>
    
      <category term="zookeeper" scheme="http://fantasydream.github.io/tags/zookeeper/"/>
    
  </entry>
  
</feed>
